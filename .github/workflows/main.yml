name: workflow

on:
  push:
    branches:
      -main
    paths-ignore:
      -'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run Unit tests
        run: echo "Running unit tests"
  
  build-and-push-ect-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run:
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build. tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: latest
        run:
          # Build a docker container and
          # push it to ECR so that is can
          # be deployed to ECS.
          docker build -t ${{ secrets.AWS_ECR_REPo_URI }}:$IMAGE_TAG .
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG 


  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest image
        run:
          docker pull ${{ secrets.AWS_ECR_REPO_URI }}:latest
      

      # - name: stop and remove visibility container if running
      #   run:
      #     docker ps -q --filter "name = visibility"


      - name: Clean previous image and containers
        run: |
          docker run -d -p 8080:8080 --name=sensor -e 'MONGo_DB_URL =${{ secrets.MONGO_DB_URL }}' -e 'AWS_ACCESS_KEY'

      - name: Clean previous image and containers
        run: |
          docker system prune -f
          





      
